#!/bin/bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è .bazelrc.local

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
LOCAL_RC="$PROJECT_ROOT/.bazelrc.local"

echo "üîç –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è Bazel..."

# –°–æ–∑–¥–∞–µ–º .bazelrc.local
echo "# –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π .bazelrc.local" > "$LOCAL_RC"
echo "# –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ git!" >> "$LOCAL_RC"
echo "# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: $(date)" >> "$LOCAL_RC"
echo "" >> "$LOCAL_RC"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
case "$(uname -s)" in
    Darwin*)
        echo "üçé –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ macOS"
        echo "# === MACOS DETECTED ===" >> "$LOCAL_RC"
        echo "build --config=macos" >> "$LOCAL_RC"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        if [[ "$(uname -m)" == "arm64" ]]; then
            echo "   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Apple Silicon (ARM64)"
            echo "build --host_cpu=darwin_arm64" >> "$LOCAL_RC"
        else
            echo "   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Intel (x86_64)"
            echo "build --host_cpu=darwin_x86_64" >> "$LOCAL_RC"
        fi
        
        # –ü–æ–∏—Å–∫ Homebrew –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        if command -v brew >/dev/null 2>&1; then
            HOMEBREW_PREFIX=$(brew --prefix)
            echo "   Homebrew –æ–±–Ω–∞—Ä—É–∂–µ–Ω: $HOMEBREW_PREFIX"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            for tool in pkg-config ninja; do
                if [[ -f "$HOMEBREW_PREFIX/bin/$tool" ]]; then
                    tool_upper=$(echo "$tool" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
                    echo "build --action_env=${tool_upper}=$HOMEBREW_PREFIX/bin/$tool" >> "$LOCAL_RC"
                    echo "   ‚úÖ $tool: $HOMEBREW_PREFIX/bin/$tool"
                else
                    echo "   ‚ö†Ô∏è  $tool: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Homebrew"
                fi
            done
            
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Make —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –Ω–∞ macOS
        MAKE_FOUND=false
        # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º GNU Make –≤ Homebrew (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ)
        if [[ -f "$HOMEBREW_PREFIX/bin/gmake" ]]; then
            echo "build --action_env=MAKE=$HOMEBREW_PREFIX/bin/gmake" >> "$LOCAL_RC"
            echo "   ‚úÖ make: $HOMEBREW_PREFIX/bin/gmake (GNU Make, Homebrew)"
            MAKE_FOUND=true
        elif [[ -f "$HOMEBREW_PREFIX/bin/make" ]]; then
            echo "build --action_env=MAKE=$HOMEBREW_PREFIX/bin/make" >> "$LOCAL_RC"
            echo "   ‚úÖ make: $HOMEBREW_PREFIX/bin/make (Homebrew)"
            MAKE_FOUND=true
        fi
        
        # 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Homebrew, –∏—â–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö
        if [[ "$MAKE_FOUND" == "false" ]]; then
            if [[ -f "/usr/local/bin/gmake" ]]; then
                echo "build --action_env=MAKE=/usr/local/bin/gmake" >> "$LOCAL_RC"
                echo "   ‚úÖ make: /usr/local/bin/gmake (GNU Make)"
                MAKE_FOUND=true
            elif [[ -f "/usr/local/bin/make" ]]; then
                echo "build --action_env=MAKE=/usr/local/bin/make" >> "$LOCAL_RC"
                echo "   ‚úÖ make: /usr/local/bin/make"
                MAKE_FOUND=true
            elif [[ -f "/usr/bin/make" ]]; then
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ make
                MAKE_VERSION=$(/usr/bin/make --version 2>/dev/null | head -1)
                echo "build --action_env=MAKE=/usr/bin/make" >> "$LOCAL_RC"
                echo "   ‚úÖ make: /usr/bin/make (—Å–∏—Å—Ç–µ–º–Ω—ã–π - $MAKE_VERSION)"
                MAKE_FOUND=true
            elif command -v make >/dev/null 2>&1; then
                MAKE_PATH=$(which make)
                echo "build --action_env=MAKE=$MAKE_PATH" >> "$LOCAL_RC"
                echo "   ‚úÖ make: $MAKE_PATH (–≤ PATH)"
                MAKE_FOUND=true
            fi
            
            if [[ "$MAKE_FOUND" == "false" ]]; then
                echo "   ‚ö†Ô∏è  make: –Ω–µ –Ω–∞–π–¥–µ–Ω"
                echo "      –°–∏—Å—Ç–µ–º–Ω—ã–π: xcode-select --install"
                echo "      GNU Make: brew install make"
            fi
        fi
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ CMake —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–æ–∫–∞—Ü–∏—è–º–∏
            CMAKE_FOUND=false
            if [[ -f "$HOMEBREW_PREFIX/bin/cmake" ]]; then
                echo "build --action_env=CMAKE=$HOMEBREW_PREFIX/bin/cmake" >> "$LOCAL_RC"
                echo "   ‚úÖ cmake: $HOMEBREW_PREFIX/bin/cmake (Homebrew)"
                CMAKE_FOUND=true
            fi
        else
            echo "   ‚ö†Ô∏è  Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Make —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –Ω–∞ macOS
        MAKE_FOUND=false
        # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º GNU Make –≤ Homebrew (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ)
        if command -v brew >/dev/null 2>&1; then
            HOMEBREW_PREFIX=$(brew --prefix)
            if [[ -f "$HOMEBREW_PREFIX/bin/gmake" ]]; then
                echo "build --action_env=MAKE=$HOMEBREW_PREFIX/bin/gmake" >> "$LOCAL_RC"
                echo "   ‚úÖ make: $HOMEBREW_PREFIX/bin/gmake (GNU Make, Homebrew)"
                MAKE_FOUND=true
            elif [[ -f "$HOMEBREW_PREFIX/bin/make" ]]; then
                echo "build --action_env=MAKE=$HOMEBREW_PREFIX/bin/make" >> "$LOCAL_RC"
                echo "   ‚úÖ make: $HOMEBREW_PREFIX/bin/make (Homebrew)"
                MAKE_FOUND=true
            fi
        fi
        
        # 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Homebrew, –∏—â–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö
        if [[ "$MAKE_FOUND" == "false" ]]; then
            if [[ -f "/usr/local/bin/gmake" ]]; then
                echo "build --action_env=MAKE=/usr/local/bin/gmake" >> "$LOCAL_RC"
                echo "   ‚úÖ make: /usr/local/bin/gmake (GNU Make)"
                MAKE_FOUND=true
            elif [[ -f "/usr/local/bin/make" ]]; then
                echo "build --action_env=MAKE=/usr/local/bin/make" >> "$LOCAL_RC"
                echo "   ‚úÖ make: /usr/local/bin/make"
                MAKE_FOUND=true
            elif [[ -f "/usr/bin/make" ]]; then
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ make
                MAKE_VERSION=$(/usr/bin/make --version 2>/dev/null | head -1)
                echo "build --action_env=MAKE=/usr/bin/make" >> "$LOCAL_RC"
                echo "   ‚úÖ make: /usr/bin/make (—Å–∏—Å—Ç–µ–º–Ω—ã–π - $MAKE_VERSION)"
                MAKE_FOUND=true
            elif command -v make >/dev/null 2>&1; then
                MAKE_PATH=$(which make)
                echo "build --action_env=MAKE=$MAKE_PATH" >> "$LOCAL_RC"
                echo "   ‚úÖ make: $MAKE_PATH (–≤ PATH)"
                MAKE_FOUND=true
            fi
            
            if [[ "$MAKE_FOUND" == "false" ]]; then
                echo "   ‚ö†Ô∏è  make: –Ω–µ –Ω–∞–π–¥–µ–Ω"
                echo "      –°–∏—Å—Ç–µ–º–Ω—ã–π: xcode-select --install"
                echo "      GNU Make: brew install make"
            fi
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ CMake –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö macOS (–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Homebrew)
        CMAKE_FOUND=false
        if command -v brew >/dev/null 2>&1; then
            HOMEBREW_PREFIX=$(brew --prefix)
            if [[ -f "$HOMEBREW_PREFIX/bin/cmake" ]]; then
                CMAKE_FOUND=true
            fi
        fi
        
        if [[ "$CMAKE_FOUND" == "false" ]]; then
            if [[ -f "/Applications/CMake.app/Contents/bin/cmake" ]]; then
                echo "build --action_env=CMAKE=/Applications/CMake.app/Contents/bin/cmake" >> "$LOCAL_RC"
                echo "   ‚úÖ cmake: /Applications/CMake.app/Contents/bin/cmake (CMake.app)"
                CMAKE_FOUND=true
            elif [[ -f "/usr/local/bin/cmake" ]]; then
                echo "build --action_env=CMAKE=/usr/local/bin/cmake" >> "$LOCAL_RC"
                echo "   ‚úÖ cmake: /usr/local/bin/cmake"
                CMAKE_FOUND=true
            elif command -v cmake >/dev/null 2>&1; then
                CMAKE_PATH=$(which cmake)
                echo "build --action_env=CMAKE=$CMAKE_PATH" >> "$LOCAL_RC"
                echo "   ‚úÖ cmake: $CMAKE_PATH (–≤ PATH)"
                CMAKE_FOUND=true
            fi
            
            if [[ "$CMAKE_FOUND" == "false" ]]; then
                echo "   ‚ö†Ô∏è  cmake: –Ω–µ –Ω–∞–π–¥–µ–Ω"
                echo "      –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: brew install cmake"
                echo "      –ò–ª–∏ —Å–∫–∞—á–∞—Ç—å —Å: https://cmake.org/download/"
            fi
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—É—Ç—è—Ö (–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Homebrew)
        for tool in pkg-config ninja; do
            tool_upper=$(echo "$tool" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –Ω–∞–π–¥–µ–Ω –≤ Homebrew
            if ! grep -q "${tool_upper}=" "$LOCAL_RC"; then
                if command -v "$tool" >/dev/null 2>&1; then
                    TOOL_PATH=$(which "$tool")
                    echo "build --action_env=${tool_upper}=$TOOL_PATH" >> "$LOCAL_RC"
                    echo "   ‚úÖ $tool: $TOOL_PATH (—Å–∏—Å—Ç–µ–º–Ω—ã–π)"
                else
                    echo "   ‚ö†Ô∏è  $tool: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
                    case "$tool" in
                        pkg-config)
                            echo "      –£—Å—Ç–∞–Ω–æ–≤–∫–∞: brew install pkg-config"
                            ;;
                        ninja)
                            echo "      –£—Å—Ç–∞–Ω–æ–≤–∫–∞: brew install ninja"
                            ;;
                    esac
                fi
            fi
        done
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Xcode
        if command -v xcodebuild >/dev/null 2>&1; then
            echo "   ‚úÖ Xcode –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
        else
            echo "   ‚ö†Ô∏è  Xcode –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω—É–∂–µ–Ω –¥–ª—è iOS —Å–±–æ—Ä–∫–∏)"
        fi
        ;;
        
    Linux*)
        echo "üêß –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Linux"
        echo "# === LINUX DETECTED ===" >> "$LOCAL_RC"
        echo "build --config=linux" >> "$LOCAL_RC"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        echo "   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $(uname -m)"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        for tool in make cmake pkg-config ninja; do
            if command -v "$tool" >/dev/null 2>&1; then
                tool_path=$(which "$tool")
                tool_upper=$(echo "$tool" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
                echo "build --action_env=${tool_upper}=$tool_path" >> "$LOCAL_RC"
                echo "   ‚úÖ $tool: $tool_path"
            else
                echo "   ‚ö†Ô∏è  $tool: –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
        done
        ;;
        
    MINGW*|MSYS*|CYGWIN*)
        echo "ü™ü –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Windows"
        echo "# === WINDOWS DETECTED ===" >> "$LOCAL_RC"
        echo "build --config=windows" >> "$LOCAL_RC"
        
        # –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ Windows
        if [[ -f "/c/Program Files/CMake/bin/cmake.exe" ]]; then
            echo "build --action_env=CMAKE=\"C:/Program Files/CMake/bin/cmake.exe\"" >> "$LOCAL_RC"
            echo "   ‚úÖ CMake: C:/Program Files/CMake/bin/cmake.exe"
        fi
        ;;
        
    *)
        echo "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°, –∏—Å–ø–æ–ª—å–∑—É–µ–º Linux –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        echo "# === UNKNOWN OS (using Linux defaults) ===" >> "$LOCAL_RC"
        echo "build --config=linux" >> "$LOCAL_RC"
        ;;
esac

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ CI/CD —Å—Ä–µ–¥—ã
if [[ -n "${CI:-}" ]] || [[ -n "${GITHUB_ACTIONS:-}" ]] || [[ -n "${JENKINS_URL:-}" ]] || [[ -n "${BUILDKITE:-}" ]]; then
    echo "ü§ñ CI/CD —Å—Ä–µ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
    echo "build --config=ci" >> "$LOCAL_RC"
fi

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
echo "" >> "$LOCAL_RC"
echo "# === DEFAULT MODE ===" >> "$LOCAL_RC"
echo "build --config=dev" >> "$LOCAL_RC"

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
echo "" >> "$LOCAL_RC"
echo "# === –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===" >> "$LOCAL_RC"
echo "# –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏:" >> "$LOCAL_RC"
echo "# build --jobs=16" >> "$LOCAL_RC"
echo "# build --local_cpu_resources=16" >> "$LOCAL_RC"
echo "# build --local_ram_resources=32768" >> "$LOCAL_RC"

echo ""
echo "‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: $LOCAL_RC"
echo ""
echo "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:"
echo "$(cat "$LOCAL_RC")"
echo ""
echo "üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:"
echo "   bazel build //...                    # –ê–≤—Ç–æ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
echo "   bazel build --config=mac-dev //...   # –Ø–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
echo "   bazel build --config=profile //...   # –° –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º"