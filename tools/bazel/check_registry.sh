#!/bin/bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Registry

set -euo pipefail

echo "üîç –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò REGISTRY"
echo "================================="

echo ""
echo "1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ registry –≤ .bazelrc:"
echo "-----------------------------------"
if [[ -f ".bazelrc" ]]; then
    echo "–ò–∑ .bazelrc:"
    grep -E "(common|build|query|mod).*--registry" .bazelrc | sed 's/^/   /'
else
    echo "‚ùå .bazelrc –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

echo ""
echo "2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ registry:"
echo "---------------------------------"

check_registry() {
    local registry_url="$1"
    echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞: $registry_url"
    
    # –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Å–ª–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
    registry_url="${registry_url%/}"
    
    if curl -I --connect-timeout 5 --max-time 10 "$registry_url" >/dev/null 2>&1; then
        echo "   ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Bazel Central Registry
        if [[ "$registry_url" == *"bcr.bazel.build"* ]]; then
            if curl -I --connect-timeout 5 --max-time 10 "$registry_url/modules" >/dev/null 2>&1; then
                echo "   ‚úÖ /modules endpoint –¥–æ—Å—Ç—É–ø–µ–Ω"
            else
                echo "   ‚ö†Ô∏è  /modules endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            fi
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è GitHub raw registry
        if [[ "$registry_url" == *"raw.githubusercontent.com"* ]]; then
            local test_path="$registry_url/modules"
            if curl -I --connect-timeout 5 --max-time 10 "$test_path" >/dev/null 2>&1; then
                echo "   ‚úÖ GitHub registry —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
            else
                echo "   ‚ö†Ô∏è  GitHub registry –º–æ–∂–µ—Ç –Ω–µ –∏–º–µ—Ç—å modules –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
            fi
        fi
    else
        echo "   ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
}

# –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ registry –∏–∑ .bazelrc
if [[ -f ".bazelrc" ]]; then
    grep -E "\--registry=" .bazelrc | while IFS= read -r line; do
        if [[ "$line" =~ --registry=([^ ]+) ]]; then
            registry="${BASH_REMATCH[1]}"
            check_registry "$registry"
        fi
    done
fi

echo ""
echo "3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–æ–ª—é—Ü–∏–∏ –º–æ–¥—É–ª–µ–π:"
echo "------------------------------"
echo "–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª—è—Ö..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Bazel –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å registry
if bazel mod graph --output=text >/dev/null 2>&1; then
    echo "‚úÖ Bazel —É—Å–ø–µ—à–Ω–æ —á–∏—Ç–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é registry"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    echo ""
    echo "üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–æ–¥—É–ª–∏:"
    if [[ -f "MODULE.bazel" ]]; then
        grep "bazel_dep" MODULE.bazel | while read -r line; do
            if [[ "$line" =~ name\ =\ \"([^\"]+)\".*version\ =\ \"([^\"]+)\" ]]; then
                module_name="${BASH_REMATCH[1]}"
                module_version="${BASH_REMATCH[2]}"
                echo "   üîç $module_name@$module_version"
            fi
        done
    fi
else
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π"
    echo "   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
    echo "   - Registry –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    echo "   - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MODULE.bazel"  
    echo "   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é"
fi

echo ""
echo "4Ô∏è‚É£ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–ª–∞–≥–æ–≤ Bazel:"
echo "----------------------------"
echo "–§–ª–∞–≥–∏ registry, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Bazel:"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ —Ñ–ª–∞–≥–∏ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è
bazel build //... --announce_rc --nobuild 2>&1 | grep -E "(registry|Registry)" | head -10 | sed 's/^/   /' || echo "   –§–ª–∞–≥–∏ registry –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤—ã–≤–æ–¥–µ"

echo ""
echo "5Ô∏è‚É£ –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π:"
echo "---------------------------"

test_module_availability() {
    local module_name="$1"
    local registry_base="$2"
    
    echo "üîç –¢–µ—Å—Ç –º–æ–¥—É–ª—è: $module_name"
    
    # –î–ª—è GitHub registry –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    if [[ "$registry_base" == *"github"* ]]; then
        local module_url="$registry_base/modules/$module_name"
        if curl -I --connect-timeout 5 --max-time 10 "$module_url" >/dev/null 2>&1; then
            echo "   ‚úÖ –ú–æ–¥—É–ª—å $module_name –¥–æ—Å—Ç—É–ø–µ–Ω –≤ $registry_base"
        else
            echo "   ‚ùå –ú–æ–¥—É–ª—å $module_name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ $registry_base"
        fi
    fi
}

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–æ–¥—É–ª–∏
if grep -q "tx-kit-repo" .bazelrc 2>/dev/null; then
    kit_repo_url=$(grep "tx-kit-repo" .bazelrc | head -1 | sed 's/.*--registry=\([^ ]*\).*/\1/')
    test_module_availability "lwlog" "$kit_repo_url"
fi

echo ""
echo "6Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
echo "---------------"

recommendations=()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
registry_lines=$(grep -c -E "--registry=" .bazelrc 2>/dev/null || echo "0")
if [[ "$registry_lines" -gt 4 ]]; then
    recommendations+=("üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'common --registry=' –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã")
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS
if grep -q "http://" .bazelrc 2>/dev/null; then
    recommendations+=("üîí –ó–∞–º–µ–Ω–∏—Ç–µ HTTP registry –Ω–∞ HTTPS –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ registry
if grep -n "bcr.bazel.build" .bazelrc | head -1 | grep -q ":1:"; then
    recommendations+=("üìä –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö registry –ø–µ—Ä–µ–¥ bcr.bazel.build")
fi

if [[ ${#recommendations[@]} -eq 0 ]]; then
    echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è registry –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞!"
else
    for rec in "${recommendations[@]}"; do
        echo "$rec"
    done
fi

echo ""
echo "7Ô∏è‚É£ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:"
echo "----------------------"
echo "# –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ –º–æ–¥—É–ª–µ–π:"
echo "bazel mod graph"
echo ""
echo "# –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–ª–∞–≥–∏:"
echo "bazel build //... --announce_rc | grep registry"
echo ""
echo "# –û–±–Ω–æ–≤–∏—Ç—å lock —Ñ–∞–π–ª –º–æ–¥—É–ª–µ–π:"
echo "bazel mod deps --lockfile_mode=update"
echo ""
echo "# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–¥—É–ª—å:"
echo "bazel mod show_repo <module_name>"

echo ""
echo "üéØ –°—Ç–∞—Ç—É—Å registry:"
echo "=================="

if bazel info >/dev/null 2>&1; then
    echo "‚úÖ Bazel —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    if bazel mod graph --output=text >/dev/null 2>&1; then
        echo "‚úÖ Registry –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        echo "‚úÖ –ú–æ–¥—É–ª–∏ —Ä–µ–∑–æ–ª–≤—è—Ç—Å—è —É—Å–ø–µ—à–Ω–æ"
    else
        echo "‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–∑–æ–ª—é—Ü–∏–µ–π –º–æ–¥—É–ª–µ–π"
    fi
else
    echo "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Bazel"
fi